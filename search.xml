<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Princeton Algorithm I: Elementary Symbol Tables]]></title>
    <url>%2F2017%2F05%2F19%2FPrinceton-Algorithm-I-Elementary-Symbol-Tables%2F</url>
    <content type="text"><![CDATA[##1. API-What is the meaning of symbol tables?-Associate values to each key. To be more specific, to implements Key-Value pair abstraction. Key-Value pair abstraction Insert a value with specified key Given a key, search for the corresbonding value Ex. DNS lookup Insert URL with specified IP address Given URL, find corresponding IP address Some conventions Values are not null Method get() returns null if the key not present Method put() overwrites old value with new value Equality testAll Java classes inherit a method equals. To design equals, some standard recipe are following: Optimization for reference equality Check against null Check that to objects are of the same type and cast Compare each significant field: if field is a primitive type, use == if field is an object, use object.equals() if field is an array, apply to each entry (or Arrays.equals(a,b) but not a.equals(b)) Ex. Input a file, contains many words, output the word with max freqency123456789101112131415161718192021public class FrequencyCounter&#123;public static void main(String[] args)&#123;int minlen = Integer.parseInt(args[0]);ST&lt;String, Integer&gt; st = new ST&lt;String,Integer&gt;();while (!StdIn.isEmpty())&#123; //read the string and update freqencyString word = StdIn.readString();if (word.length() &lt; minlen) continue; //ignore short stringsif (!st.contains(word)) st.put(word, 1);else st.put(word, st.get(word) + 1);&#125;String max = "";st.put(max, 0);for (String word : st.keys())if (st.get(word) &gt; st.get(max))max = word;StdOut.println(max + " " + st.get(max)); //Print the string with max freq&#125;&#125; ##2. Elementary ST implementation ###2.1 Sequential search in a linked listData structureMaintain an (unordered) linked list of key-value pairs.SearchScan through all keys until find a match.InsertScan through all keys until find a match; if no match add to front. ###2.2 Binary Search in an ordered arrayData structureMaintain an ordered array of key-value pairs.SearchBinary SearchInsertNeed to shift all greater keys over. Important function for binary search: How many keys &lt; k ? 12345678910111213141516171819202122public Value get(Key key)&#123;if (isEmpty()) return null;int i = rank(key);if (i &lt; N &amp;&amp; keys[i].compareTo(key) == 0) return vals[i];else return null;&#125;//return the number of keys &lt; kprivate int rank(Key key)&#123; int lo = 0, hi = N-1;while (lo &lt;= hi) //Binary search&#123;int mid = lo + (hi - lo) / 2;int cmp = key.compareTo(keys[mid]);if (cmp &lt; 0) hi = mid - 1; else if (cmp &gt; 0) lo = mid + 1;else if (cmp == 0) return mid;&#125;return lo; &#125; The Summary of two ways is listed Obveresly, these two ways are not efficient enough, some optimization is still needed. ##3. Ordered Operation Normally, Ordered symbol table should has the following API 123456789101112131415161718192021public class ST&lt;Key extends Comparable&lt;Key&gt;, Value&gt;&#123;ST(); // create an ordered symbol tablevoid put(Key key, Value val); //put key-value pair into the table (remove key from table if value is null)Value get(Key key); //value paired with key (null if key is absent)void delete(Key key); //remove key (and its value) from tableboolean contains(Key key); //is there a value paired with key?boolean isEmpty(); //is the table empty?int size(); //number of key-value pairsKey min(); //smallest keyKey max(); //largest keyKey floor(Key key); //largest key less than or equal to key Key ceiling(Key key); //smallest key greater than or equal to key int rank(Key key); //number of keys less than keyKey select(int k); //key of rank kvoid deleteMin(); //delete smallest keyvoid deleteMax(); //delete largest keyint size(Key lo, Key hi); //number of keys in [lo..hi]Iterable&lt;Key&gt; keys(Key lo, Key hi); //keys in [lo..hi], in sorted orderIterable&lt;Key&gt; keys(); //all keys in the table, in sorted order&#125;]]></content>
      <tags>
        <tag>algorithm princeton open_course Table</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[New Blog, New Life]]></title>
    <url>%2F2017%2F05%2F15%2FNew-Blog-New-Life%2F</url>
    <content type="text"><![CDATA[HELLO THERE,This is my blog, posted on my own github.I created it by Hexo. Many themes tried, and Next is selected. Why I build this blog?I build this blog intending to write something for my coding life. I just followed a web course about algorithm and found that it was so inefficient to work out algorithm problems without discussion. I should make some conclusion on it to intensify the memory of these knowledge. At the same time, this blog can help me to : save my junk writing English learn about how to use my new Macbook Pro learn about how to use git to manage my project learn about Markdown, a language to write blog, which I am using to type this word What will I do on this blog? Conclusions about algorithm, problem oriented Some of my projects details Maybe some diary? Maybe some thoughts on movies, series or music A request to whom read this blogWell…… I am a little bit LAZY. So if you find that there is long time after the last article, please kindly remind me to write something. In the endAs all the coders do at the beginng… Hello World!]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>